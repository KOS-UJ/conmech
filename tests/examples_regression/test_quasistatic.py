"""
Created at 21.08.2019
"""

import numpy as np

from conmech.problem_solver import Quasistatic as QuasistaticProblem
from examples.example_quasistatic import QuasistaticSetup

setup = QuasistaticSetup()
runner = QuasistaticProblem(setup, "global optimization")


def test_global_optimization_solver():
    expected_displacement_vector = \
        [-0.03886598154004313, -0.06118683344123006, -0.07252122863348806, -0.07690179888094467,
         -0.07650483435437616, -0.05095660196034754, -0.008455359715517854, -0.03729241082741386,
         -0.0024059861287222726, -0.013046170893592019, -0.04239383842941932, -0.03779039749559018,
         -0.029054139415097855, -0.01559052910840409, -0.025416269143255378, -0.06037271957725121,
         -0.022371867667928227, -0.05816489446516092, -0.01625596767115312, -0.043045994287246626,
         -0.00784296548013633, -0.00598763496040588, -0.0009564310779794019, 0.005049186910343184,
         0.006995819498832686, -0.03620832813849762, -0.07042953129760421, -0.10678393510081544,
         -0.14124082884111477, -0.17437286138784935, -0.08836914954574102, -0.046364501815873954,
         -0.05009266417690689, -0.011440297752755901, -0.013642146334088504, -0.14496021663190015,
         -0.10773207519396032, -0.06816343464558446, -0.028331292919031806, -0.16365050870813608,
         -0.16070321259386386, -0.12668555782055194, -0.1256237953820429, -0.08724342781104305,
         -0.18004769288379652, -0.18193461479244344, -0.1453912326403375, -0.10677813481316067,
         -0.06599869614326125, -0.027056381866750245]

    runner.solving_method = "global optimization"
    results = runner.solve(n_steps=8)
    displacement_vector = results[-1].displacement.T.reshape(1, -1)[0]
    np.testing.assert_array_almost_equal(displacement_vector, expected_displacement_vector,
                                         decimal=6)


def test_schur_complement_solver():
    expected_displacement_vector = \
        [-0.032079978465473113, -0.050950073236082936, -0.06063021205058028, -0.06444003518078953,
         -0.06437980080443488, -0.04042583570426585, -0.003064005828667873, -0.02954036827464508,
         -0.0007125750705989492, -0.01028248076552801, -0.030346519440960982, -0.027004485135210466,
         -0.020718564680144394, -0.01109274641770734, -0.013483300579839447, -0.047985696583380005,
         -0.01144276784712865, -0.04616300122378625, -0.007571285733430648, -0.030873148250724826,
         0.0038760952248969418, 0.005096106821310827, 0.00810208727341466, 0.010860788894991405,
         0.009334841006245915, -0.03023987711106655, -0.061997727111569464, -0.09714687907508598,
         -0.13156749704863296, -0.16498462420209525, -0.07895565318090059, -0.040329165684627175,
         -0.043097362569022614, -0.009586727434646232, -0.011178501977570018, -0.13389142244347263,
         -0.09738235158638486, -0.05980623748444442, -0.023781220177263068, -0.15207951215429363,
         -0.1501663908878953, -0.11580550541356419, -0.11523519559679508, -0.07797892886048183,
         -0.16874206161848776, -0.17000020287358197, -0.13415114364247382, -0.0967786042629154,
         -0.05852560487909402, -0.023592956627465154]

    runner.solving_method = "schur"
    results = runner.solve(n_steps=8)
    displacement_vector = results[-1].displacement.T.reshape(1, -1)[0]
    np.testing.assert_array_almost_equal(displacement_vector, expected_displacement_vector,
                                         decimal=6)
