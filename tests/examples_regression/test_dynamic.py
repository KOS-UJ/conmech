"""
Created at 21.08.2019
"""

import numpy as np
from conmech.problem_solver import Dynamic as DynamicProblem
from examples.example_dynamic import DynamicSetup

setup = DynamicSetup()
runner = DynamicProblem(setup, "global optimization")


def test_global_optimization_solver():
    expected_displacement_vector = \
        [-0.11052389326884332, -0.18334981294439903, -0.22349516368943845, -0.24084225308212726, -0.24482530142575815,
         -0.11974107986949582, 0.04034522634248626, -0.08638415150795271, 0.013870068767039412, -0.029274464596135932,
         -0.04436156100281342, -0.03874799756781136, -0.029289873976957495, -0.015496368257876932, 0.0536094994209428,
         -0.14473121207881728, 0.054116689547448846, -0.1377465519422004, 0.05110704481517737, -0.04623677211644456,
         0.15355768963980085, 0.15335220689667983, 0.14728008957040642, 0.12581007130397087, 0.07808333865924907,
         -0.10531586890420432, -0.2589132396690917, -0.45079637936192524, -0.6545354913385428, -0.8560880572010334,
         -0.34726384198889887, -0.16234276818561544, -0.16716806488825947, -0.033508052895117546, -0.03590161969392732,
         -0.652351883981854, -0.4448676868401986, -0.24815498588575652, -0.08413768201257847, -0.7542267476069939,
         -0.7548692986575909, -0.5477173899993708, -0.5495878422108429, -0.3440402789252217, -0.8558889906729761,
         -0.8559953151830919, -0.6520444570141012, -0.44578168186101647, -0.25115414162708916, -0.09501769226549925]

    runner.solving_method = "global optimization"
    results = runner.solve(n_steps=8)
    print("[", ", ".join((str(n) for n in results[-1].displacement.T.reshape(1, -1)[0])), "]")
    displacement_vector = results[-1].displacement.T.reshape(1, -1)[0]
    np.testing.assert_array_almost_equal(displacement_vector, expected_displacement_vector, decimal=6)


def test_schur_complement_solver():
    expected_displacement_vector = \
        [-0.021927844640140203, -0.03310220128933928, -0.03820555710518666, -0.040396865437034864, -0.04107350777988749,
         -0.028717313593409656, -0.007447181760680799, -0.02129113797858418, -0.002141907749923053,
         -0.007586732636360288, -0.027241979786081054, -0.023901320471729756, -0.01820178781076391,
         -0.009729636053141387, -0.021356083956949, -0.03454813594867541, -0.018716047493028284, -0.03274219195743161,
         -0.013759222401441219, -0.028350839475185186, -0.014919729591079336, -0.013355686337006184,
         -0.008815617347356489, -0.0026351034731126816, 0.001600497107182582, -0.02259017454268876,
         -0.041207195571200575, -0.057687940655074314, -0.07118698199918276, -0.08348439264497341,
         -0.048726026787939546, -0.027004183400482648, -0.029956146836447383, -0.007350997547648106,
         -0.008831928338065382, -0.07060050959083353, -0.05637593954301936, -0.03878878629044067, -0.017737723711286058,
         -0.0768464349345275, -0.0772227745931662, -0.06306033635284053, -0.06416434787551965, -0.046796461369818534,
         -0.08347468497724303, -0.0834317484479828, -0.06971948786227067, -0.05470500580652744, -0.03651417320977424,
         -0.01622191273874054]
    runner.solving_method = "schur"
    results = runner.solve(n_steps=8)
    displacement_vector = results[-1].displacement.T.reshape(1, -1)[0]
    np.testing.assert_array_almost_equal(displacement_vector, expected_displacement_vector, decimal=6)
