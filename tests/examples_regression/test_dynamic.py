"""
Created at 21.08.2019
"""

import numpy as np
from conmech.problem_solver import Dynamic as DynamicProblem
from examples.example_dynamic import DynamicSetup

setup = DynamicSetup()
runner = DynamicProblem(setup, "global optimization")


def test_global_optimization_solver():
    expected_displacement_vector = \
        [-0.03886598154004313, -0.06118683344123006, -0.07252122863348806, -0.07690179888094467,
         -0.07650483435437616, -0.05095660196034754, -0.008455359715517854, -0.03729241082741386,
         -0.0024059861287222726, -0.013046170893592019, -0.04239383842941932, -0.03779039749559018,
         -0.029054139415097855, -0.01559052910840409, -0.025416269143255378, -0.06037271957725121,
         -0.022371867667928227, -0.05816489446516092, -0.01625596767115312, -0.043045994287246626,
         -0.00784296548013633, -0.00598763496040588, -0.0009564310779794019, 0.005049186910343184,
         0.006995819498832686, -0.03620832813849762, -0.07042953129760421, -0.10678393510081544,
         -0.14124082884111477, -0.17437286138784935, -0.08836914954574102, -0.046364501815873954,
         -0.05009266417690689, -0.011440297752755901, -0.013642146334088504, -0.14496021663190015,
         -0.10773207519396032, -0.06816343464558446, -0.028331292919031806, -0.16365050870813608,
         -0.16070321259386386, -0.12668555782055194, -0.1256237953820429, -0.08724342781104305,
         -0.18004769288379652, -0.18193461479244344, -0.1453912326403375, -0.10677813481316067,
         -0.06599869614326125, -0.027056381866750245]

    runner.solving_method = "global optimization"
    results = runner.solve(n_steps=8)
    displacement_vector = results[-1].displacement.T.reshape(1, -1)[0]
    np.testing.assert_array_almost_equal(displacement_vector, expected_displacement_vector,
                                         decimal=6)


def test_schur_complement_solver():
    expected_displacement_vector = \
        [-0.01933137087734935, -0.029110608251329783, -0.033626475687038186, -0.03544327107537183,
         -0.03557482690985223, -0.02655331951113144, -0.009051229026665228, -0.019697509423304383,
         -0.002738612813791462, -0.00704440037619196, -0.0267367100571397, -0.02367355022025507,
         -0.018184540034060784, -0.009797180826144537, -0.02288946519655784, -0.03163793403173739,
         -0.02046572531570484, -0.030221481149601145, -0.015615420372302007, -0.027513215145185795,
         -0.01862545564340135, -0.017155708290463936, -0.012742984724741096, -0.006317401077744827,
         -0.0008792785925922412, -0.019134276644644833, -0.03277546020373559, -0.04414845916624414,
         -0.05280198562324248, -0.06044474348810895, -0.03836652726495651, -0.02203647705136891,
         -0.02461078053788796, -0.006202909228520486, -0.007616097102158616, -0.05362611155306063,
         -0.04399980232042758, -0.03130286562676426, -0.014974783226977874, -0.05802910641898824,
         -0.05739754580503708, -0.048705450842331625, -0.04893891070305301, -0.037116234411383946,
         -0.062023776462347226, -0.0625140125743059, -0.053242959809150475, -0.04272158392688534,
         -0.02920991231085955, -0.013163427554694053]
    runner.solving_method = "schur"
    results = runner.solve(n_steps=8)
    displacement_vector = results[-1].displacement.T.reshape(1, -1)[0]
    np.testing.assert_array_almost_equal(displacement_vector, expected_displacement_vector,
                                         decimal=6)
