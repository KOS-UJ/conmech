"""
Created at 21.08.2019
"""

import numpy as np

from conmech.problem_solver import Static as StaticProblem
from examples.example_static import StaticSetup

setup = StaticSetup()
runner = StaticProblem(setup, "direct")


# TODO #22
def test_direct_solver():
    expected_displacement_vector = \
        [-0.048431759844240425, -0.07642597806630966, -0.09064928524780301, -0.09615189102332702, -0.09566479476491946,
         -0.06363833770340369, -0.010523457435306334, -0.04646055024605652, -0.003026512423529025,
         -0.016310551451467436, -0.052917905654066455, -0.04715694777891846, -0.036203649015124205,
         -0.019439011613714526, -0.031644175160552054, -0.07544454811034969, -0.027844295327868033,
         -0.07267389962908721, -0.020213583759391224, -0.05373533424788142, -0.009623115916863819,
         -0.0073075821693289545, -0.0010424058685135067, 0.006366958547147005, 0.008672960738307587,
         -0.044291289188853236, -0.08750102181306169, -0.13301396194199125, -0.17619656462003175, -0.21772098504801582,
         -0.10993322297079583, -0.05740487359130626, -0.06193062680204177, -0.014068915141026562, -0.016686434906234945,
         -0.1808304905742557, -0.13417541693841417, -0.08459416206523246, -0.034867491218016154, -0.2042488299900517,
         -0.20057210345993243, -0.15792069578523849, -0.15660723586445954, -0.10849453038593482, -0.22480477783798186,
         -0.22716040577148527, -0.1813672598662907, -0.13297417321582633, -0.08192300316499983, -0.03338082218876782]
    runner.solving_method = "direct"
    result = runner.solve()
    displacement_vector = result.displacement.T.reshape(1, -1)[0]
    np.testing.assert_array_almost_equal(displacement_vector, expected_displacement_vector, decimal=16)


def test_global_optimization_solver():
    expected_displacement_vector = \
        [-0.13815486672922392, -0.22918726623210872, -0.2793689544228484, -0.3010528161351328, -0.3060316270971137,
         -0.14967634966512347, 0.05043153327743042, -0.1079801894823307, 0.01733758610196896, -0.03659308079094983,
         -0.05545195117333028, -0.048434996931187586, -0.03661234257995998, -0.019370460293769553, 0.06701187433916171,
         -0.18091401514430153, 0.06764586168237825, -0.17218318956705456, 0.06388380591020862, -0.05779596499101269,
         0.19194711242765028, 0.1916902584604768, 0.18410011164809195, 0.15726258949065958, 0.09760417370196056,
         -0.13164483625622178, -0.3236415491912621, -0.5634954738702871, -0.8181693643621282, -1.0701100714211056,
         -0.43407980227997073, -0.20292846024339262, -0.20896008096715465, -0.04188506607311703, -0.044877024663189075,
         -0.8154398549487408, -0.5560846086762147, -0.3101937322312292, -0.105172102561503, -0.9427834343999794,
         -0.9435866233047855, -0.6846467376251798, -0.6869848027635537, -0.4300503485591374, -1.069861238261034,
         -1.0699941439158818, -0.815055571456576, -0.5572271024522369, -0.3139426767017421, -0.11877211564679008]
    runner.solving_method = "global optimization"
    result = runner.solve()
    displacement_vector = result.displacement.T.reshape(1, -1)[0]
    np.testing.assert_array_almost_equal(displacement_vector, expected_displacement_vector, decimal=6)


def test_schur_complement_solver():
    expected_displacement_vector = \
        [-0.1381536530020343, -0.2291852484049533, -0.27936651128606527, -0.3010501839832488, -0.30602895221508347,
         -0.14967503262295503, 0.050431089617370355, -0.10797923589194451, 0.01733743534687207, -0.03659275551832322,
         -0.05545146303515053, -0.0484345694316332, -0.03661201989471602, -0.019370287799476762, 0.06701129325519944,
         -0.1809124287211548, 0.06764527376539767, -0.17218168008763796, 0.06388324742606016, -0.057795456603903506,
         0.1919454347220984, 0.1916885823488223, 0.18409849598125047, 0.15726120210766664, 0.09760330810399998,
         -0.13164366531691596, -0.3236386737088144, -0.5634904828026565, -0.818162132908873, -1.0701006380271243,
         -0.4340759455633168, -0.20292664753502776, -0.2089582184378192, -0.04188468723415602, -0.04487661931069588,
         -0.8154326458967784, -0.5560796772283209, -0.31019097185224004, -0.10517116119381296, -0.9427751067909707,
         -0.9435782913193491, -0.6846406731570341, -0.6869787206557822, -0.43004652660815895, -1.0698518024428285,
         -1.0699847035817394, -0.8150483648802179, -0.5572221612750303, -0.3139398844489617, -0.11877105236121616]
    runner.solving_method = "schur"
    result = runner.solve()
    displacement_vector = result.displacement.T.reshape(1, -1)[0]
    np.testing.assert_array_almost_equal(displacement_vector, expected_displacement_vector, decimal=6)
