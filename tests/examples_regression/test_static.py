"""
Created at 21.08.2019
"""

import numpy as np

from conmech.problem_solver import Static as StaticProblem
from examples.example_static import StaticSetup

setup = StaticSetup()
runner = StaticProblem(setup, "direct")


# TODO #22
def test_direct_solver():
    expected_displacement_vector = \
        [-0.048431759844240425, -0.07642597806630966, -0.09064928524780301, -0.09615189102332702,
         -0.09566479476491946, -0.06363833770340369, -0.010523457435306334, -0.04646055024605652,
         -0.003026512423529025, -0.016310551451467436, -0.052917905654066455, -0.04715694777891846,
         -0.036203649015124205, -0.019439011613714526, -0.031644175160552054, -0.07544454811034969,
         -0.027844295327868033, -0.07267389962908721, -0.020213583759391224, -0.05373533424788142,
         -0.009623115916863819, -0.0073075821693289545, -0.0010424058685135067,
         0.006366958547147005, 0.008672960738307587, -0.044291289188853236, -0.08750102181306169,
         -0.13301396194199125, -0.17619656462003175, -0.21772098504801582, -0.10993322297079583,
         -0.05740487359130626, -0.06193062680204177, -0.014068915141026562, -0.016686434906234945,
         -0.1808304905742557, -0.13417541693841417, -0.08459416206523246, -0.034867491218016154,
         -0.2042488299900517, -0.20057210345993243, -0.15792069578523849, -0.15660723586445954,
         -0.10849453038593482, -0.22480477783798186, -0.22716040577148527, -0.1813672598662907,
         -0.13297417321582633, -0.08192300316499983, -0.03338082218876782
         ]
    runner.solving_method = "direct"
    result = runner.solve()
    displacement_vector = result.displacement.T.reshape(1, -1)[0]
    np.testing.assert_array_almost_equal(displacement_vector, expected_displacement_vector,
                                         decimal=12)


def test_global_optimization_solver():
    expected_displacement_vector = \
        [-0.048582476925757234, -0.0764835418008343, -0.09065153579186008, -0.09612724860118087,
         -0.09563104294297022, -0.06369575244973086, -0.010569199643693418, -0.04661551353497064,
         -0.003007482660198935, -0.016307713617693342, -0.0529922980346634, -0.0472379968673773,
         -0.03631767426816875, -0.019488161383394664, -0.03177033642836566, -0.07546589947156333,
         -0.02796483458491028, -0.07270611808285807, -0.020319959589644717, -0.053807492859761934,
         -0.00980370684946651, -0.007484543701210666, -0.0011955388467706702, 0.006311483637225667,
         0.00874477437565134, -0.04526041017382535, -0.08803691412130174, -0.13347991887672284,
         -0.1765510360520967, -0.21796607673410756, -0.11046143693147302, -0.057955627270546095,
         -0.06261583022113361, -0.01430037219164819, -0.017052682916907407, -0.18120027078917159,
         -0.13466509399245014, -0.08520429330698057, -0.035414116147382636, -0.20456313588587335,
         -0.20087901574162598, -0.1583569472763932, -0.15702974422684982, -0.10905428476310057,
         -0.2250596161040418, -0.22741826848984967, -0.18173904079971834, -0.1334726685171541,
         -0.08249837017696579, -0.0338204773327339]

    runner.solving_method = "global optimization"
    result = runner.solve()
    displacement_vector = result.displacement.T.reshape(1, -1)[0]
    np.testing.assert_array_almost_equal(displacement_vector, expected_displacement_vector,
                                         decimal=6)


def test_schur_complement_solver():
    expected_displacement_vector = \
        [-0.048582054824061145, -0.07648288075492914, -0.09065076049507313, -0.09612643496258944,
         -0.09563024335710228, -0.06369519762851072, -0.010569102065675396, -0.04661510397089433,
         -0.003007453078564216, -0.016307567574581256, -0.052991831888821825, -0.04723758109586461,
         -0.036317353869388586, -0.019487987991202015, -0.031770041434980516, -0.07546525088402192,
         -0.02796457670178528, -0.07270548913319297, -0.020319773061177826, -0.05380701991769132,
         -0.009803594214118947, -0.0074844556197421475, -0.0011955146674312092,
         0.006311433205439372, 0.008744696508193362, -0.04526000147057512, -0.08803612250589608,
         -0.13347872815106246, -0.17654948126479747, -0.21796418844044957, -0.11046044184072278,
         -0.057955094798880114, -0.06261525952004385, -0.014300236404882446, -0.017052522789377772,
         -0.1811986712306682, -0.13466388860275394, -0.08520352102667937, -0.035413789770032185,
         -0.204561340398579, -0.20087725566146147, -0.15835553738539596, -0.15702834768633392,
         -0.10905329975124106, -0.22505765855941903, -0.22741628602466096, -0.181737437163481,
         -0.13347147413167043, -0.08249762158732994, -0.03382016476586196]

    runner.solving_method = "schur"
    result = runner.solve()
    displacement_vector = result.displacement.T.reshape(1, -1)[0]
    np.testing.assert_array_almost_equal(displacement_vector, expected_displacement_vector,
                                         decimal=6)
